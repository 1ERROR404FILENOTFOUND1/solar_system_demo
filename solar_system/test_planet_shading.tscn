[gd_scene load_steps=10 format=2]

[ext_resource path="res://solar_system/planet_material.tres" type="Material" id=1]
[ext_resource path="res://textures/grass_normal.png" type="Texture" id=2]
[ext_resource path="res://textures/grass_albedo.png" type="Texture" id=3]

[sub_resource type="OpenSimplexNoise" id=1]
octaves = 5
period = 128.0
persistence = 0.4

[sub_resource type="VoxelGeneratorGraph" id=2]
graph_data = {
"connections": [ [ 2, 0, 8, 0 ], [ 2, 0, 9, 0 ], [ 10, 0, 1, 0 ], [ 3, 0, 8, 1 ], [ 3, 0, 9, 1 ], [ 11, 0, 10, 0 ], [ 4, 0, 8, 2 ], [ 4, 0, 9, 2 ], [ 12, 0, 11, 0 ], [ 8, 0, 12, 0 ], [ 9, 0, 10, 1 ] ],
"nodes": {
"1": {
"gui_position": Vector2( 1140, 160 ),
"type": "OutputSDF"
},
"10": {
"gui_position": Vector2( 960, 120 ),
"type": "Add"
},
"11": {
"b": 100.0,
"gui_position": Vector2( 700, 40 ),
"name": "height_multiplier",
"type": "Multiply"
},
"12": {
"gui_position": Vector2( 540, 60 ),
"type": "Abs"
},
"2": {
"gui_position": Vector2( 180, 80 ),
"type": "InputX"
},
"3": {
"gui_position": Vector2( 180, 160 ),
"type": "InputY"
},
"4": {
"gui_position": Vector2( 180, 240 ),
"type": "InputZ"
},
"8": {
"gui_position": Vector2( 400, 40 ),
"noise": SubResource( 1 ),
"type": "Noise3D"
},
"9": {
"gui_position": Vector2( 400, 200 ),
"name": "sphere",
"radius": 400.0,
"type": "SdfSphere"
}
}
}

[sub_resource type="Environment" id=3]
background_mode = 1
background_color = Color( 0.0509804, 0.0588235, 0.0823529, 1 )
ambient_light_color = Color( 0.0980392, 0.0980392, 0.0980392, 1 )

[sub_resource type="Shader" id=4]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,-1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,-1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	NORMALMAP = triplanar_texture(texture_normal,uv1_power_normal,uv1_triplanar_pos).rgb;
	NORMALMAP_DEPTH = normal_scale;
}
"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/normal_scale = 1.0
shader_param/uv1_blend_sharpness = 1.0
shader_param/uv1_scale = Vector3( 0.01, 0.01, 0.01 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 3 )
shader_param/texture_normal = ExtResource( 2 )

[sub_resource type="SphereMesh" id=6]
radius = 200.0
height = 400.0

[node name="Node" type="Node"]

[node name="Planet" type="VoxelLodTerrain" parent="."]
stream = SubResource( 2 )
lod_count = 6
material = ExtResource( 1 )
voxel_bounds = AABB( -1024, -1024, -1024, 2048, 2048, 2048 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.719679, 0.694307, 0, -0.694307, 0.719679, 0, 538.943, 0 )
shadow_enabled = true
shadow_color = Color( 0.305882, 0.305882, 0.305882, 1 )
directional_shadow_max_distance = 1500.0

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 3 )

[node name="Spatial" type="Position3D" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1024, 31.31, 0 )

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 739.203 )
visible = false
material_override = SubResource( 5 )
mesh = SubResource( 6 )
material/0 = null
